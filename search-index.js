var N=null,E="",T="t",U="u",searchIndex={};
var R=["semver_parser","version","result","string","semver_parser::version","to_string","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","semver_parser::range","type_id","typeid","identifier","predicate","formatter","Identifier","VersionReq","Predicate","WildcardVersion","versionreq","semvererror","reqparseerror","ordering","partial_cmp","from_str","description","SemVerError","ReqParseError","Version","An identifier that's solely numbers.","AlphaNumeric","An identifier with letters and numbers.","rustc_version","versionmeta","channel","VersionMeta","Represents a version number conforming to the semantic…","The major version, to be incremented on incompatible…","The minor version, to be incremented when functionality is…","The patch version, to be incremented when…","The pre-release version identifier, if one exists.","The build metadata, ignored when determining version…","Contructs the simple case without pre or build.","Parse a string into a semver object.","increment_patch","Increments the patch number for this Version (Must be…","increment_minor","Increments the minor version number for this Version (Must…","increment_major","Increments the major version number for this Version (Must…","is_prerelease","Checks to see if the current Version is in pre-release…","option"];
searchIndex[R[35]]={"doc":"Simple library for getting the version information of a…","i":[[3,R[31],R[35],R[39],N,N],[12,"major",E,R[40],0,N],[12,"minor",E,R[41],0,N],[12,"patch",E,R[42],0,N],[12,"pre",E,R[43],0,N],[12,"build",E,R[44],0,N],[3,R[38],E,"Rustc version plus metada like git short hash and build…",N,N],[12,"semver",E,"Version of the compiler",1,N],[12,"commit_hash",E,"Git short hash of the build of the compiler",1,N],[12,"commit_date",E,"Commit date of the compiler",1,N],[12,"build_date",E,"Build date of the compiler; this was removed between Rust…",1,N],[12,R[37],E,"Release channel of the compiler",1,N],[12,"host",E,"Host target triple of the compiler",1,N],[12,"short_version_string",E,"Short version string of the compiler",1,N],[4,"Error",E,"The error type for this crate.",N,N],[13,"CouldNotExecuteCommand",E,"An error ocurrend when executing the `rustc` command.",2,N],[13,"Utf8Error",E,"The output of `rustc -vV` was not valid utf-8.",2,N],[13,"UnexpectedVersionFormat",E,"The output of `rustc -vV` was not in the expected format.",2,N],[13,R[30],E,"An error ocurred in parsing a `VersionReq`.",2,N],[13,R[29],E,"An error ocurred in parsing the semver.",2,N],[13,"UnknownPreReleaseTag",E,"The pre-release tag is unknown.",2,N],[4,"Channel",E,"Release channel of the compiler.",N,N],[13,"Dev",E,"Development release channel",3,N],[13,"Nightly",E,"Nightly release channel",3,N],[13,"Beta",E,"Beta release channel",3,N],[13,"Stable",E,"Stable release channel",3,N],[5,R[1],E,"Returns the `rustc` SemVer version.",N,[[],[R[2],[R[1]]]]],[5,"version_meta",E,"Returns the `rustc` SemVer version and additional metadata…",N,[[],[R[2],[R[36]]]]],[5,"version_meta_for",E,"Parses a \"rustc -vV\" output string and returns the SemVer…",N,[[["str"]],[R[2],[R[36]]]]],[6,"Result",E,"The result type for this crate.",N,N],[11,"for_command",E,"Returns the version metadata for `cmd`, which should be a…",1,[[["command"]],[R[2],[R[36]]]]],[11,R[5],E,E,0,[[["self"]],[R[3]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,N],[11,R[8],E,E,0,[[[U]],[R[2]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[13],E,E,0,[[["self"]],[R[14]]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[2]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,N],[11,R[8],E,E,1,[[[U]],[R[2]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[13],E,E,1,[[["self"]],[R[14]]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[["self"]],[R[2]]]],[11,R[5],E,E,2,[[["self"]],[R[3]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[8],E,E,2,[[[U]],[R[2]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[13],E,E,2,[[["self"]],[R[14]]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[["self"]],[R[2]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,N],[11,R[8],E,E,3,[[[U]],[R[2]]]],[11,R[9],E,E,3,[[["self"]],[T]]],[11,R[13],E,E,3,[[["self"]],[R[14]]]],[11,R[10],E,E,3,[[["self"]],[T]]],[11,R[11],E,E,3,[[["self"]],[R[2]]]],[11,"fmt",E,E,0,[[["self"],[R[17]]],[R[2],["error"]]]],[11,"cmp",E,E,0,[[["self"],[R[1]]],[R[25]]]],[11,R[26],E,E,0,[[["self"],[R[1]]],[R[55],[R[25]]]]],[11,"from",E,E,0,[[[R[1]]],[R[1]]]],[11,"from",E,E,0,N],[11,R[27],E,E,0,[[["str"]],[R[2],[R[1],R[23]]]]],[11,"hash",E,E,0,N],[11,"eq",E,E,0,[[["self"],[R[1]]],["bool"]]],[11,"fmt",E,E,0,[[["self"],[R[17]]],[R[2],["error"]]]],[11,"clone",E,E,0,[[["self"]],[R[1]]]],[11,"eq",E,E,3,[[["self"],[R[37]]],["bool"]]],[11,"eq",E,E,1,[[["self"],[R[36]]],["bool"]]],[11,"ne",E,E,1,[[["self"],[R[36]]],["bool"]]],[11,"cmp",E,E,3,[[["self"],[R[37]]],[R[25]]]],[11,"cmp",E,E,1,[[["self"],[R[36]]],[R[25]]]],[11,"clone",E,E,3,[[["self"]],[R[37]]]],[11,"clone",E,E,1,[[["self"]],[R[36]]]],[11,"from",E,E,2,[[["utf8error"]],["error"]]],[11,"from",E,E,2,[[[R[23]]],["error"]]],[11,"from",E,E,2,[[[R[24]]],["error"]]],[11,R[26],E,E,3,[[["self"],[R[37]]],[R[55],[R[25]]]]],[11,R[26],E,E,1,[[["self"],[R[36]]],[R[55],[R[25]]]]],[11,"lt",E,E,1,[[["self"],[R[36]]],["bool"]]],[11,"le",E,E,1,[[["self"],[R[36]]],["bool"]]],[11,"gt",E,E,1,[[["self"],[R[36]]],["bool"]]],[11,"ge",E,E,1,[[["self"],[R[36]]],["bool"]]],[11,"fmt",E,E,2,[[["self"],[R[17]]],[R[2]]]],[11,"hash",E,E,3,N],[11,"hash",E,E,1,N],[11,"fmt",E,E,2,[[["self"],[R[17]]],[R[2]]]],[11,"fmt",E,E,3,[[["self"],[R[17]]],[R[2]]]],[11,"fmt",E,E,1,[[["self"],[R[17]]],[R[2]]]],[11,"cause",E,E,2,[[["self"]],[R[55],["error"]]]],[11,R[28],E,E,2,[[["self"]],["str"]]],[11,"new",E,R[45],0,[[["u64"],["u64"],["u64"]],[R[1]]]],[11,"parse",E,R[46],0,[[["str"]],[R[2],[R[1],R[23]]]]],[11,R[47],E,R[48],0,N],[11,R[49],E,R[50],0,N],[11,R[51],E,R[52],0,N],[11,R[53],E,R[54],0,[[["self"]],["bool"]]]],"p":[[3,R[31]],[3,R[38]],[4,"Error"],[4,"Channel"]]};
searchIndex["semver"]={"doc":"Semantic version parsing and comparison.","i":[[3,R[31],"semver",R[39],N,N],[12,"major",E,R[40],0,N],[12,"minor",E,R[41],0,N],[12,"patch",E,R[42],0,N],[12,"pre",E,R[43],0,N],[12,"build",E,R[44],0,N],[3,R[19],E,"A `VersionReq` is a struct containing a list of predicates…",N,N],[4,R[18],E,"An identifier in the pre-release or build metadata.",N,N],[13,"Numeric",E,R[32],1,N],[13,R[33],E,R[34],1,N],[4,R[29],E,"An error type for this crate",N,N],[13,"ParseError",E,"An error ocurred while parsing.",2,N],[4,R[30],E,"A `ReqParseError` is returned from methods which parse a…",N,N],[13,"InvalidVersionRequirement",E,"The given version requirement is invalid.",3,N],[13,"OpAlreadySet",E,"You have already provided an operation, such as `=`, `~`,…",3,N],[13,"InvalidSigil",E,"The sigil you have written is not correct.",3,N],[13,"VersionComponentsMustBeNumeric",E,"All components of a version must be numeric.",3,N],[13,"InvalidIdentifier",E,"There was an error parsing an identifier.",3,N],[13,"MajorVersionRequired",E,"At least a major version is required.",3,N],[13,"UnimplementedVersionRequirement",E,"An unimplemented version requirement.",3,N],[13,"DeprecatedVersionRequirement",E,"This form of requirement is deprecated.",3,N],[11,"new",E,R[45],0,[[["u64"],["u64"],["u64"]],[R[1]]]],[11,"parse",E,R[46],0,[[["str"]],[R[2],[R[1],R[23]]]]],[11,R[47],E,R[48],0,[[["self"]]]],[11,R[49],E,R[50],0,[[["self"]]]],[11,R[51],E,R[52],0,[[["self"]]]],[11,R[53],E,R[54],0,[[["self"]],["bool"]]],[11,"any",E,"`any()` is a factory method which creates a `VersionReq`…",4,[[],[R[22]]]],[11,"parse",E,"`parse()` is the main constructor of a `VersionReq`. It…",4,[[["str"]],[R[2],[R[22],R[24]]]]],[11,"exact",E,"`exact()` is a factory method which creates a `VersionReq`…",4,[[[R[1]]],[R[22]]]],[11,"matches",E,"`matches()` matches a given `Version` against this…",4,[[["self"],[R[1]]],["bool"]]],[11,R[5],E,E,0,[[["self"]],[R[3]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,N],[11,R[8],E,E,0,[[[U]],[R[2]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[13],E,E,0,[[["self"]],[R[14]]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[2]]]],[11,R[5],E,E,4,[[["self"]],[R[3]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[6],E,E,4,[[["self"]],[T]]],[11,R[7],E,E,4,N],[11,R[8],E,E,4,[[[U]],[R[2]]]],[11,R[9],E,E,4,[[["self"]],[T]]],[11,R[13],E,E,4,[[["self"]],[R[14]]]],[11,R[10],E,E,4,[[["self"]],[T]]],[11,R[11],E,E,4,[[["self"]],[R[2]]]],[11,R[5],E,E,1,[[["self"]],[R[3]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,N],[11,R[8],E,E,1,[[[U]],[R[2]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[13],E,E,1,[[["self"]],[R[14]]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[["self"]],[R[2]]]],[11,R[5],E,E,2,[[["self"]],[R[3]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,N],[11,R[8],E,E,2,[[[U]],[R[2]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[13],E,E,2,[[["self"]],[R[14]]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[["self"]],[R[2]]]],[11,R[5],E,E,3,[[["self"]],[R[3]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,N],[11,R[8],E,E,3,[[[U]],[R[2]]]],[11,R[9],E,E,3,[[["self"]],[T]]],[11,R[13],E,E,3,[[["self"]],[R[14]]]],[11,R[10],E,E,3,[[["self"]],[T]]],[11,R[11],E,E,3,[[["self"]],[R[2]]]],[11,"eq",E,E,1,[[["self"],[R[15]]],["bool"]]],[11,"ne",E,E,1,[[["self"],[R[15]]],["bool"]]],[11,"eq",E,E,2,[[["self"],[R[23]]],["bool"]]],[11,"ne",E,E,2,[[["self"],[R[23]]],["bool"]]],[11,"eq",E,E,0,[[["self"],[R[1]]],["bool"]]],[11,"eq",E,E,4,[[["self"],[R[22]]],["bool"]]],[11,"ne",E,E,4,[[["self"],[R[22]]],["bool"]]],[11,"eq",E,E,3,[[["self"],[R[24]]],["bool"]]],[11,"ne",E,E,3,[[["self"],[R[24]]],["bool"]]],[11,"cmp",E,E,1,[[["self"],[R[15]]],[R[25]]]],[11,"cmp",E,E,0,[[["self"],[R[1]]],[R[25]]]],[11,"cmp",E,E,4,[[["self"],[R[22]]],[R[25]]]],[11,"clone",E,E,1,[[["self"]],[R[15]]]],[11,"clone",E,E,0,[[["self"]],[R[1]]]],[11,"clone",E,E,2,[[["self"]],[R[23]]]],[11,"clone",E,E,4,[[["self"]],[R[22]]]],[11,"clone",E,E,3,[[["self"]],[R[24]]]],[11,"from",E,E,1,[[[R[15]]],[R[15]]]],[11,"from",E,E,0,[[[R[1]]],[R[1]]]],[11,"from",E,E,0,N],[11,"from",E,E,4,[[[R[22]]],[R[22]]]],[11,"from",E,E,3,[[[R[3]]],[R[24]]]],[11,R[26],E,E,1,[[["self"],[R[15]]],[R[55],[R[25]]]]],[11,"lt",E,E,1,[[["self"],[R[15]]],["bool"]]],[11,"le",E,E,1,[[["self"],[R[15]]],["bool"]]],[11,"gt",E,E,1,[[["self"],[R[15]]],["bool"]]],[11,"ge",E,E,1,[[["self"],[R[15]]],["bool"]]],[11,R[26],E,E,2,[[["self"],[R[23]]],[R[55],[R[25]]]]],[11,"lt",E,E,2,[[["self"],[R[23]]],["bool"]]],[11,"le",E,E,2,[[["self"],[R[23]]],["bool"]]],[11,"gt",E,E,2,[[["self"],[R[23]]],["bool"]]],[11,"ge",E,E,2,[[["self"],[R[23]]],["bool"]]],[11,R[26],E,E,0,[[["self"],[R[1]]],[R[55],[R[25]]]]],[11,R[26],E,E,4,[[["self"],[R[22]]],[R[55],[R[25]]]]],[11,"lt",E,E,4,[[["self"],[R[22]]],["bool"]]],[11,"le",E,E,4,[[["self"],[R[22]]],["bool"]]],[11,"gt",E,E,4,[[["self"],[R[22]]],["bool"]]],[11,"ge",E,E,4,[[["self"],[R[22]]],["bool"]]],[11,"fmt",E,E,1,[[["self"],[R[17]]],[R[2]]]],[11,"fmt",E,E,2,[[["self"],[R[17]]],[R[2]]]],[11,"fmt",E,E,0,[[["self"],[R[17]]],[R[2]]]],[11,"fmt",E,E,3,[[["self"],[R[17]]],[R[2]]]],[11,"fmt",E,E,4,[[["self"],[R[17]]],[R[2]]]],[11,"hash",E,E,1,N],[11,"hash",E,E,0,[[["self"],["h"]]]],[11,"hash",E,E,4,N],[11,"fmt",E,E,1,[[["self"],[R[17]]],[R[2]]]],[11,"fmt",E,E,0,[[["self"],[R[17]]],[R[2]]]],[11,"fmt",E,E,2,[[["self"],[R[17]]],[R[2]]]],[11,"fmt",E,E,4,[[["self"],[R[17]]],[R[2]]]],[11,"fmt",E,E,3,[[["self"],[R[17]]],[R[2]]]],[11,R[27],E,E,0,[[["str"]],[R[2],[R[1],R[23]]]]],[11,R[27],E,E,4,[[["str"]],[R[2],[R[22],R[24]]]]],[11,R[28],E,E,2,[[["self"]],["str"]]],[11,R[28],E,E,3,[[["self"]],["str"]]]],"p":[[3,R[31]],[4,R[18]],[4,R[29]],[4,R[30]],[3,R[19]]]};
searchIndex[R[0]]={"doc":E,"i":[[0,R[1],R[0],E,N,N],[3,R[31],R[4],E,N,N],[12,"major",E,E,0,N],[12,"minor",E,E,0,N],[12,"patch",E,E,0,N],[12,"pre",E,E,0,N],[12,"build",E,E,0,N],[4,R[18],E,E,N,N],[13,"Numeric",E,R[32],1,N],[13,R[33],E,R[34],1,N],[5,"parse",E,E,N,[[["str"]],[R[2],[R[1],R[3]]]]],[0,"range",R[0],E,N,N],[3,R[19],R[12],E,N,N],[12,"predicates",E,E,2,N],[3,R[20],E,E,N,N],[12,"op",E,E,3,N],[12,"major",E,E,3,N],[12,"minor",E,E,3,N],[12,"patch",E,E,3,N],[12,"pre",E,E,3,N],[4,R[21],E,E,N,N],[13,"Major",E,E,4,N],[13,"Minor",E,E,4,N],[13,"Patch",E,E,4,N],[4,"Op",E,E,N,N],[13,"Ex",E,E,5,N],[13,"Gt",E,E,5,N],[13,"GtEq",E,E,5,N],[13,"Lt",E,E,5,N],[13,"LtEq",E,E,5,N],[13,"Tilde",E,E,5,N],[13,"Compatible",E,E,5,N],[13,"Wildcard",E,E,5,N],[5,"parse_predicate",E,E,N,[[["str"]],[R[2],[R[16],R[3]]]]],[5,"parse",E,E,N,[[["str"]],[R[2],[R[22],R[3]]]]],[11,R[5],R[4],E,0,[[["self"]],[R[3]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,N],[11,R[8],E,E,0,[[[U]],[R[2]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[13],E,E,0,[[["self"]],[R[14]]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[2]]]],[11,R[5],E,E,1,[[["self"]],[R[3]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,N],[11,R[8],E,E,1,[[[U]],[R[2]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[13],E,E,1,[[["self"]],[R[14]]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[["self"]],[R[2]]]],[11,"from",R[12],E,2,[[[T]],[T]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[8],E,E,2,[[[U]],[R[2]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[13],E,E,2,[[["self"]],[R[14]]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[["self"]],[R[2]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[8],E,E,3,[[[U]],[R[2]]]],[11,R[9],E,E,3,[[["self"]],[T]]],[11,R[13],E,E,3,[[["self"]],[R[14]]]],[11,R[10],E,E,3,[[["self"]],[T]]],[11,R[11],E,E,3,[[["self"]],[R[2]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[8],E,E,4,[[[U]],[R[2]]]],[11,R[9],E,E,4,[[["self"]],[T]]],[11,R[13],E,E,4,[[["self"]],[R[14]]]],[11,R[10],E,E,4,[[["self"]],[T]]],[11,R[11],E,E,4,[[["self"]],[R[2]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[["self"]],[U]]],[11,R[8],E,E,5,[[[U]],[R[2]]]],[11,R[9],E,E,5,[[["self"]],[T]]],[11,R[13],E,E,5,[[["self"]],[R[14]]]],[11,R[10],E,E,5,[[["self"]],[T]]],[11,R[11],E,E,5,[[["self"]],[R[2]]]],[11,"eq",R[4],E,0,[[["self"],[R[1]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[1]]],["bool"]]],[11,"eq",E,E,1,[[["self"],[R[15]]],["bool"]]],[11,"ne",E,E,1,[[["self"],[R[15]]],["bool"]]],[11,"eq",R[12],E,4,[[["self"],["wildcardversion"]],["bool"]]],[11,"eq",E,E,5,[[["self"],["op"]],["bool"]]],[11,"ne",E,E,5,[[["self"],["op"]],["bool"]]],[11,"eq",E,E,3,[[["self"],[R[16]]],["bool"]]],[11,"ne",E,E,3,[[["self"],[R[16]]],["bool"]]],[11,"clone",R[4],E,0,[[["self"]],[R[1]]]],[11,"clone",E,E,1,[[["self"]],[R[15]]]],[11,"fmt",E,E,0,[[["self"],[R[17]]],[R[2]]]],[11,"fmt",E,E,1,[[["self"],[R[17]]],[R[2]]]],[11,"fmt",E,E,0,[[["self"],[R[17]]],[R[2]]]],[11,"fmt",E,E,1,[[["self"],[R[17]]],[R[2]]]],[11,"fmt",R[12],E,2,[[["self"],[R[17]]],[R[2]]]],[11,"fmt",E,E,4,[[["self"],[R[17]]],[R[2]]]],[11,"fmt",E,E,5,[[["self"],[R[17]]],[R[2]]]],[11,"fmt",E,E,3,[[["self"],[R[17]]],[R[2]]]],[11,R[27],E,E,5,[[["str"]],[R[2],["op",R[3]]]]]],"p":[[3,R[31]],[4,R[18]],[3,R[19]],[3,R[20]],[4,R[21]],[4,"Op"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);